const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const UserModel = require('./models/User');

const app = express();
const port = 5000;

app.use(cors());
app.use(express.json());

mongoose.connect("mongodb+srv://angelbelangel:angel@cluster0.zdy2k51.mongodb.net/angeldb", { useNewUrlParser: true, useUnifiedTopology: true });

const secretKey = 'mySecretKey';

// Registration endpoint
app.post('/users/register', async (req, res) => {
  try {
    const { username, password } = req.body;

    // Check if username already exists
    const existingUser = await UserModel.findOne({ username });
    if (existingUser) {
      return res.status(400).json({ message: 'Username already exists' });
    }

    // Hash the password
    const hashedPassword = await bcrypt.hash(password, 10);

    // Create a new user in the database
    const newUser = await UserModel.create({
      username,
      password: hashedPassword,
    });

    res.status(201).json({ message: 'User registered successfully', user: newUser });
  } catch (error) {
    console.error('Registration failed:', error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
});

// Login endpoint
app.post('/users/login', async (req, res) => {
  try {
    const { username, password } = req.body;

    // Find the user by username
    const user = await UserModel.findOne({ username });

    if (!user) {
      return res.status(401).json({ message: 'Invalid username or password' });
    }

    // Compare the provided password with the stored hashed password
    const passwordMatch = await bcrypt.compare(password, user.password);

    if (passwordMatch) {
      // Create a JWT token
      const token = jwt.sign({ username }, secretKey, { expiresIn: '1d' });
      res.json({ message: 'Login successful', token });
    } else {
      res.status(401).json({ message: 'Invalid username or password' });
    }
  } catch (error) {
    console.error('Login failed:', error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});






Registration form


import React, { useState } from "react";
import axios from "axios";
import { hash } from 'bcryptjs';

function RegistrationForm() {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");

  const handleRegistration = async () => {
    try {
      const hashedPassword = await hash(password, 10);

      const response = await axios.post(
        "http://localhost:5000/users/register",
        {
          username,
          password: hashedPassword,
        }
      );

      console.log(response.data.message);

      // Handle successful registration,
    } catch (error) {
      console.error("Registration failed:", error.response.data.message);
    }
  };

  return (
    <div className="container align-items-center justify-content-center col-md-3 was-validated">
      <h4 className="text-center mb-3">Register a new account</h4>
      <div>
        <label className="form-label">Username:</label>
        <input
          className="form-control"
          type="text"
          placeholder="Username"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          required
        />
      </div>
      <div>
        <label className="form-label">Password:</label>
        <input
          className="form-control"
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
      </div>

      <button
        type="submit"
        onClick={handleRegistration}
        className="btn btn-primary btn-lg mt-3"
      >
        Register
      </button>
    </div>
  );
}

export default RegistrationForm;




LoginForm


import React, { useState } from 'react';
import axios from 'axios';

function LoginForm({ setIsLogin }: any) {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  const handleLogin = async () => {
    try {
      const response = await axios.post('http://localhost:5000/users/login', {
        username,
        password,
      });

      console.log(response.data.message);

      // Save the token to local storage
      localStorage.setItem('token', response.data.token);
      setIsLogin(true);
    } catch (error) {
      console.error('Login failed:', error.response.data.message);
    }
  }

  return (
    <div className='container d-block align-items-center justify-content-center col-md-3 mt-5 was-validated'>
      <h2 className='text-center  mb-3 text-success'>Login to your account</h2>
      <div>
        <label className='form-label'>Username:</label>
        <input className='form-control'
          type="text"
          placeholder="Username"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          required
        />
      </div>
      <div>
        <label className='form-label'>Password:</label>
        <input className='form-control'
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
      </div>
     
      <button type="submit" onClick={handleLogin} className="btn btn-primary btn-lg mt-3">Sign in</button>
    </div>
  );
}

export default LoginForm;
